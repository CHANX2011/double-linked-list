class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        self.prev = None

class DoublyLinkedList:
    def __init__(self):
        self.head = None
    
    def append(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        last = self.head
        while last.next:
            last = last.next
        last.next = new_node
        new_node.prev = last

   
    def print_list(self):
        node = self.head
        while node:
            print(node.data, end=" <=> ")
            node = node.next
        print("None")
    
    def clone(self):
        if not self.head:
            return None
        
       
        current = self.head
        while current:
            new_node = Node(current.data)
            new_node.next = current.next
            current.next = new_node
            new_node.prev = current
            if new_node.next:
                new_node.next.prev = new_node
            current = new_node.next

        
        original = self.head
        cloned_head = self.head.next
        cloned_current = cloned_head

        while original:
            original.next = original.next.next
            if cloned_current.next:
                cloned_current.next = cloned_current.next.next
            original = original.next
            cloned_current = cloned_current.next
        
        return cloned_head


dll = DoublyLinkedList()
dll.append(1)
dll.append(2)
dll.append(3)
dll.append(4)

print("Original List:")
dll.print_list()


cloned_list = dll.clone()

print("\nCloned List:")
cloned_head = cloned_list
while cloned_head:
    print(cloned_head.data, end=" <=> ")
    cloned_head = cloned_head.next
